#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import math
import cairo
import optparse
import datetime
import logging

# Constants
# A4 Width and Height for PDF Surface - 1p = 1/72in
INCH = 72
MM = INCH/25.4
CM = INCH/2.54
A4_WIDTH, A4_HEIGHT = INCH*8.3, INCH*11.7
WEEKDAYS = {1:"Monday", 2:"Tuesday", 3:"Wednesday", 4:"Thursday", 5:"Friday", 6:"Saturday", 7:"Sunday"}
MONTHS = {1:"January", 2:"February", 3:"March", 4:"April", 5:"May", 6:"June", 7:"July", 8:"August", 9:"September", 10:"October", 11:"November", 12:"December"}

# Maybe also include short form, but auto generate with substring instead of hard coded
#WEEKDAYS_SHORT = {1:"Mon", 2:"Tue", 3:"Wed", 4:"Thu", 5:"Fri", 6:"Sat", 7:"Sun"}

def drawMonthTitle(cr, x, y, width, height, month):
	cr.set_source_rgb(0, 0, 0)
	cr.select_font_face("Sans", cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
	cr.set_font_size(height/2)
	#OFFSET_X, OFFSET_Y = math.floor(FONTSIZE*0.3333),FONTSIZE 
	cr.move_to(x, y+(height/2))
	cr.show_text(month)

def drawDay(cr, x, y, width, height, lineWidth, dateObject):
	logging.info("drawing Day element: (%s|%s): %s.%s.%s",x, y, dateObject.day, dateObject.month, dateObject.year)

	# font size in pixels
	FONTSIZE=12

	# fill box if weekend
	if(dateObject.isoweekday() >= 6):
		cr.rectangle(x, y, width, height)
		cr.set_source_rgba(0.95, 0.95, 0.95, 1.0)
		cr.fill()

	# drawing the box
	cr.set_source_rgba(0, 0, 0, 1.0)
	cr.set_line_width(lineWidth)
	cr.rectangle(x, y, width, height)
	cr.stroke()
	
	

	# drawing the text
	cr.set_source_rgb(0, 0, 0)
	cr.select_font_face("Sans", cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
	cr.set_font_size(10)
	OFFSET_X, OFFSET_Y = math.floor(FONTSIZE*0.3333),FONTSIZE 
	cr.move_to((x+OFFSET_X), (y+OFFSET_Y))

	dayText = "%s %s" % (dateObject.day, WEEKDAYS[dateObject.isoweekday()])
	cr.show_text(dayText)

def drawMonth(cr, year, month):
	logging.debug("drawing %s...", MONTHS[month])

	# constants
	SAFTY = 5*MM
	PAGE_WIDTH = 7.425*CM
	CELL_WIDTH, CELL_HEIGHT = 3.2125*CM, 2.375*CM
	LINE_WIDTH = 0.03*CM

	# Creating a new date object with the first day of the month to draw
	date = datetime.date(year, month, 1)

	# Defining a one day timedelta object to increase the date object
	one_day = datetime.timedelta(days=1)
	
	# draw month name in first cell
	drawMonthTitle(cr, SAFTY, SAFTY, CELL_WIDTH, CELL_HEIGHT, MONTHS[date.month])
	
	cellsOnPage = 1
	cellsOnPageMax = 8
	page = 0
	# for every day of the month
	while month == date.month:
		row=math.floor(cellsOnPage/2)

		# positions on page
		x=SAFTY+(page*PAGE_WIDTH)
		y=SAFTY+(row*CELL_HEIGHT)
		
		# add cell width if date is odd
		if(date.day%2!=0):
			x += CELL_WIDTH

		# draw day
		drawDay(cr, x, y, CELL_WIDTH, CELL_HEIGHT, LINE_WIDTH, date)

		# increment cell counter
		cellsOnPage+=1

		# increment date by one day
		date += one_day

		# if more than 8 cells on page
		if(cellsOnPage>=cellsOnPageMax):
			# reset cells on page counter
			cellsOnPage=0
			# increment page counter
			page+=1

def drawCalendar(cr):
	logging.debug("drawing calendar...")

	cr.translate(A4_HEIGHT,A4_WIDTH/2)
	cr.rotate(math.pi)
	drawMonth(cr,datetime.date.today().year,datetime.date.today().month)

	# draw current month
	cr.translate(A4_HEIGHT, 0)
	cr.rotate(math.pi)
	drawMonth(cr,datetime.date.today().year,datetime.date.today().month+1)

def main():
	# SetUp OptionParser
	parser = optparse.OptionParser()
	parser.add_option("-f", "--font", dest="font", 
					help="select which font to use", default="ostrich-sans")
	parser.add_option("-o", "--out", dest="out", 
					help="specify output file", default="papr.pdf")
	parser.add_option("-l", "--log", dest="log", 
					help="set log level", default="DEBUG")
	(options, arguments) = parser.parse_args()

	# SetUp Loggin
	logging.basicConfig(format='%(levelname)s: %(message)s', level=options.log)

	# Printing Options for Debugging
	for option in parser.option_list:
		if(option.dest != None):
			logging.debug("%s = %s", option, getattr(options, option.dest))
	logging.debug("Creating Cario Surface and Context")
	logging.debug("width=%sp/%scm, height=%sp/%scm", A4_HEIGHT, A4_HEIGHT/CM, A4_WIDTH, A4_WIDTH/CM)
	surface = cairo.PDFSurface(options.out, A4_HEIGHT, A4_WIDTH)
	cr = cairo.Context(surface)

	drawCalendar(cr)
	logging.info("Finished drawing Calendar!")

if __name__ == "__main__":
    sys.exit(main())
