#!/usr/bin/env python
import sys
import cairo
from optparse import OptionParser
import logging

def drawTable(cr, rows, columns, width, height, lineWidth):
	logging.info("Drawing Table: %s rows, %s columns, %sp height, %sp width, %sp line width",
					rows, columns, height, width, lineWidth)
	cr.set_source_rgba(1.0, 1.0, 1.0, 1.0)
	cr.set_line_width(lineWidth)

	columnWidth = width/columns
	rowHeight = height/rows

	for r in range(0, rows):
		for c in range(0, columns):
			cr.rectangle(c*columnWidth+(lineWidth/2), \
							r*rowHeight+(lineWidth/2), \
							columnWidth, \
							rowHeight)
	cr.stroke()

def main():
	# SetUp OptionParser
	parser = OptionParser()
	parser.add_option("-f", "--font", dest="font", 
					help="select which font to use", default="ostrich-sans")
	parser.add_option("-o", "--out", dest="out", 
					help="specify output file", default="pycal.pdf")
	parser.add_option("-l", "--log", dest="log", 
					help="set log level", default="DEBUG")
	(options, arguments) = parser.parse_args()

	# SetUp Loggin
	logging.basicConfig(format='%(levelname)s: %(message)s', level=options.log)
	logging.debug("Option --font=%s", options.font)
	logging.debug("Option --log=%s", options.log)
	logging.debug("Option --out=%s", options.out)
	
	logging.info("Creating Cario Surface")
	surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 500, 500)
	cr = cairo.Context(surface)
	
	width = 50 
	height = 50
	lineWidth = 2
	drawTable(cr, 4, 2, width, height, lineWidth)

	surface.write_to_png('out.png')

if __name__ == "__main__":
    sys.exit(main())

